import geopandas as gpd
import pandas as pd
from shapely.geometry import Point

# --- 1. Load River Erosion Vulnerability Zones Shapefile ---
path_erosion = "../data/bgd_nhr_rivererosion_barc"
gdf_erosion = gpd.read_file(path_erosion)

print("River erosion zones CRS:", gdf_erosion.crs)
print(gdf_erosion.columns)
print(gdf_erosion.head())

# --- 2. Load Roads CSV ---
roads_path = "../data/_roads3.csv"
df_roads = pd.read_csv(roads_path)

# Rename columns for clarity (if needed)
df_roads = df_roads.rename(columns={"lat": "latitude", "lon": "longitude"})

# --- 3. Convert CSV to GeoDataFrame ---
geometry = [Point(xy) for xy in zip(df_roads["longitude"], df_roads["latitude"])]
gdf_roads = gpd.GeoDataFrame(df_roads, geometry=geometry, crs="EPSG:4326")  # WGS 84

# --- 4. Reproject Roads to Match River Erosion Shapefile CRS ---
gdf_roads = gdf_roads.to_crs(gdf_erosion.crs)

# --- 5. Spatial Join (Road points with River Erosion zones) ---
joined_erosion = gpd.sjoin(gdf_roads, gdf_erosion, how="left", predicate="within")

# --- 6. Inspect for relevant erosion score column ---
print(joined_erosion.columns)  # Look for erosion score column name
print(joined_erosion["AFFECTED"].unique())
print(joined_erosion["AFFECTED"].value_counts())

# --- 7. Compute Average Erosion Score per Road ---
joined_erosion["AFFECTED_SCORE"] = joined_erosion["AFFECTED"].apply(lambda x: 1 if x == "Riverbank Erosion" else 0)

# Calculate the average erosion score per road
average_erosion_per_road = joined_erosion.groupby("road")["AFFECTED_SCORE"].mean().reset_index()
average_erosion_per_road = average_erosion_per_road.rename(columns={"AFFECTED_SCORE": "avg_erosion_score"})

# --- Normalize the Erosion Scores ---
# Min-max normalization
min_score = average_erosion_per_road["avg_erosion_score"].min()
max_score = average_erosion_per_road["avg_erosion_score"].max()

average_erosion_per_road["avg_erosion_score"] = (
    (average_erosion_per_road["avg_erosion_score"] - min_score) / (max_score - min_score)
)

# --- 8. Save or use the result ---
print(average_erosion_per_road)
average_erosion_per_road.to_csv("../data/processed_data/average_erosion_score_per_road.csv", index=False)

print(joined_erosion["AFFECTED"].unique())
print("River erosion shapefile columns:")
print(gdf_erosion.columns)



# Load the bridges Excel
df_bridges = pd.read_excel("../data/BMMS_overview.xlsx", sheet_name="BMMS_overview")

# Convert lat/lon to GeoDataFrame
df_bridges = df_bridges.rename(columns={"lat": "latitude", "lon": "longitude"})
geometry = [Point(xy) for xy in zip(df_bridges["longitude"], df_bridges["latitude"])]
gdf_bridges = gpd.GeoDataFrame(df_bridges, geometry=geometry, crs="EPSG:4326")

# Reproject bridge points to match erosion shapefile CRS
gdf_bridges = gdf_bridges.to_crs(gdf_erosion.crs)

# Spatial join
joined_erosion = gpd.sjoin(gdf_bridges, gdf_erosion, how="left", predicate="within")

# Convert 'AFFECTED' column to numeric (1 if affected, 0 if not)
joined_erosion["AFFECTED_SCORE"] = joined_erosion["AFFECTED"].apply(lambda x: 1 if x == "Riverbank Erosion" else 0)

# Calculate the average erosion score per LRPName
average_erosion_per_bridge = (
    joined_erosion.groupby("LRPName")["AFFECTED_SCORE"]
    .mean()
    .reset_index()
    .rename(columns={"AFFECTED_SCORE": "avg_erosion_score"})
)

# Normalize the average erosion score using min-max normalization
min_score = average_erosion_per_bridge["avg_erosion_score"].min()
max_score = average_erosion_per_bridge["avg_erosion_score"].max()

average_erosion_per_bridge["avg_erosion_score"] = (
    (average_erosion_per_bridge["avg_erosion_score"] - min_score) / (max_score - min_score)
)

# Save the results to a CSV file
output_path = "../data/processed_data/avg_bridge_rivererosion_score.csv"
average_erosion_per_bridge.to_csv(output_path, index=False)

# Display the final table
print(average_erosion_per_bridge)
print(f"The normalized average erosion scores per LRPName have been saved to '{output_path}'.")